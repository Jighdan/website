---
import IconCompass from "./IconCompass.astro";
import { isLinkActive } from "~/utilities/links";

const { pathname } = Astro.url;

const links: { href: string; label: string }[] = [
  { href: "/", label: "Hello" },
  { href: "/now", label: "Now" },
  { href: "/about", label: "About" },
  { href: "/journal", label: "Journal" },
  { href: "/efforts", label: "Efforts" },
  { href: "/reading", label: "Reading" },
];
---

<div role="navigation" class="max-lg:relative group">
  <button type="button" class="lg:hidden max-lg:block">
    <IconCompass className="text-black dark:text-white" />
  </button>

  <div
    role="menu"
    class="max-lg:hidden max-lg:absolute max-lg:right-0 max-lg:origin-bottom-right"
  >
    <div
      role="menubar"
      class="max-lg:opacity-0 max-lg:px-4 max-lg:py-6 max-lg:bg-white max-lg:dark:bg-black max-lg:border max-lg:dark:border-white/20 max-lg:border-black/20 max-lg:rounded-sm"
    >
      <nav class="flex flex-col gap-1 lg:gap-2 max-lg:pointer-events-none">
        {
          links.map((link) => {
            const isActive = isLinkActive(pathname, link.href);

            return (
              <a href={link.href} data-active={isActive ? "true" : "false"}>
                {link.label}
              </a>
            );
          })
        }
      </nav>
    </div>
  </div>
</div>

<style>
  div[role="navigation"]:focus-within > div[role="menu"],
  div[role="navigation"]:hover > div[role="menu"] {
    @apply max-lg:pointer-events-auto max-lg:block;
  }

  div[role="navigation"]:focus-within > div[role="menu"] > div[role="menubar"],
  div[role="navigation"]:hover > div[role="menu"] > div[role="menubar"] {
    @apply max-lg:opacity-100;
  }

  div[role="navigation"]:focus-within
    > div[role="menu"]
    > div[role="menubar"]
    > nav,
  div[role="navigation"]:hover > div[role="menu"] > div[role="menubar"] > nav {
    @apply max-lg:pointer-events-auto;
  }

  nav > a {
    @apply underline transition-[background-color,_color,_padding] whitespace-nowrap px-0.5 w-fit select-none;
  }

  nav > a[data-active="true"] {
    @apply bg-black text-white dark:bg-white dark:text-black;

    text-decoration-line: unset;
  }
</style>

<script>
  const navigation = document.querySelector("div[role='navigation']");
  const button = document.querySelector("div[role='navigation'] > button");

  window.addEventListener("click", () => {
    const isOpen = navigation?.getAttribute("data-is-open") === "true";

    if (isOpen) {
      navigation?.setAttribute("data-is-open", "false");
    }
  });

  button?.addEventListener("click", (event) => {
    event.stopPropagation();
    const isOpen = navigation?.getAttribute("data-is-open") === "true";

    navigation?.setAttribute("data-is-open", isOpen ? "false" : "true");
  });
</script>
